/**
 * Proof of Concept demonstration for SOQL Query Cache
 * 
 * This class demonstrates the performance improvements from caching SOQL queries
 * by comparing SOQLQueryCache against standard Database.query() calls.
 * 
 * Usage: Execute in Anonymous Apex
 * - SOQLCachePOC.quickDemo()     // 30 second comparison
 * - SOQLCachePOC.runFullDemo()   // Complete demonstration suite
 */
public class SOQLCachePOC {
    
    /**
     * Quick demo - Direct comparison between cached and uncached queries
     * Perfect for showing to stakeholders or quick validation
     */
    public static void quickDemo() {
        System.debug('========================================');
        System.debug('SOQL Cache vs Standard Database.query()');
        System.debug('Performance Comparison Demo');
        System.debug('========================================\n');
        
        setupTestData();
        
        String query = 'SELECT Id, Name, Industry FROM Account LIMIT 100';
        
        System.debug('Testing query: ' + query);
        System.debug('Executing each approach 3 times...\n');
        
        // ========== STANDARD APEX (NO CACHING) ==========
        System.debug('--- STANDARD APEX: Database.query() ---');
        
        List<Long> standardTimes = new List<Long>();
        for (Integer i = 1; i <= 3; i++) {
            Long start = System.currentTimeMillis();
            List<Account> result = Database.query(query);
            Long elapsed = System.currentTimeMillis() - start;
            standardTimes.add(elapsed);
            System.debug('  Call ' + i + ': ' + elapsed + 'ms (' + result.size() + ' records)');
        }
        
        Long standardAvg = (standardTimes[0] + standardTimes[1] + standardTimes[2]) / 3;
        System.debug('  Average: ' + standardAvg + 'ms per query');
        System.debug('  ‚ùå NO caching benefit - same time every call\n');
        
        // ========== WITH SOQL CACHE ==========
        System.debug('--- WITH SOQL CACHE: SOQLQueryCache.query() ---');
        
        SOQLQueryCache.resetStatistics();
        
        List<Long> cachedTimes = new List<Long>();
        for (Integer i = 1; i <= 3; i++) {
            Long start = System.currentTimeMillis();
            List<Account> result = (List<Account>)SOQLQueryCache.query(query);
            Long elapsed = System.currentTimeMillis() - start;
            cachedTimes.add(elapsed);
            
            String status = (i == 1) ? 'MISS - first call' : 'HIT - cached!';
            System.debug('  Call ' + i + ': ' + elapsed + 'ms (' + result.size() + ' records) [' + status + ']');
        }
        
        Long cachedAvg = (cachedTimes[1] + cachedTimes[2]) / 2; // Average of cache hits only
        System.debug('  Average (hits): ' + cachedAvg + 'ms per query');
        System.debug('  ‚úÖ Cached queries return instantly!\n');
        
        // ========== RESULTS ==========
        System.debug('========================================');
        System.debug('RESULTS');
        System.debug('========================================');
        System.debug('Standard Apex (avg):     ' + standardAvg + 'ms');
        System.debug('Cached queries (avg):    ' + cachedAvg + 'ms');
        
        if (cachedAvg > 0) {
            Decimal speedup = (Decimal)standardAvg / (Decimal)cachedAvg;
            Long timeSaved = standardAvg - cachedAvg;
            
            System.debug('\nüöÄ PERFORMANCE GAINS:');
            System.debug('  ‚Ä¢ Speedup: ' + speedup.setScale(1) + 'x faster with cache!');
            System.debug('  ‚Ä¢ Time saved per query: ' + timeSaved + 'ms');
            System.debug('  ‚Ä¢ On 10 queries: saves ~' + (timeSaved * 10 / 1000.0).setScale(2) + ' seconds');
            System.debug('  ‚Ä¢ On 100 queries: saves ~' + (timeSaved * 100 / 1000.0).setScale(1) + ' seconds');
            System.debug('  ‚Ä¢ On 1000 queries: saves ~' + (timeSaved * 1000 / 1000.0).setScale(1) + ' seconds');
        }
        
        System.debug('\nüìä Cache Statistics: ' + SOQLQueryCache.getStatistics().getSummary());
        System.debug('========================================');
    }
    
    /**
     * Full demonstration suite - 6 comprehensive demos
     */
    public static void runFullDemo() {
        System.debug('========================================');
        System.debug('SOQL Query Cache - Complete Demo Suite');
        System.debug('========================================\n');
        
        setupTestData();
        
        demo1_BasicPerformance();
        demo2_RepeatedQueries();
        demo3_MultiQueryScenario();
        demo4_QueryNormalization();
        demo5_CacheStrategies();
        demo6_Statistics();
        
        System.debug('\n========================================');
        System.debug('Complete Demo Suite Finished!');
        System.debug('========================================');
    }
    
    /**
     * Demo 1: Basic performance comparison - Cache vs No Cache
     */
    private static void demo1_BasicPerformance() {
        System.debug('\n--- DEMO 1: Cache vs No Cache Performance ---\n');
        
        String query = 'SELECT Id, Name, Industry, AnnualRevenue FROM Account LIMIT 50';
        
        System.debug('** WITHOUT CACHE (Database.query) **');
        
        // First call - no cache
        Long start1 = System.currentTimeMillis();
        List<Account> standard1 = Database.query(query);
        Long time1 = System.currentTimeMillis() - start1;
        System.debug('First call:  ' + time1 + 'ms');
        
        // Second call - still no cache
        Long start2 = System.currentTimeMillis();
        List<Account> standard2 = Database.query(query);
        Long time2 = System.currentTimeMillis() - start2;
        System.debug('Second call: ' + time2 + 'ms');
        
        // Third call - still no cache
        Long start3 = System.currentTimeMillis();
        List<Account> standard3 = Database.query(query);
        Long time3 = System.currentTimeMillis() - start3;
        System.debug('Third call:  ' + time3 + 'ms');
        System.debug('Average:     ' + ((time1 + time2 + time3) / 3) + 'ms');
        System.debug('Status:      ‚ùå Every call hits database\n');
        
        System.debug('** WITH CACHE (SOQLQueryCache.query) **');
        
        SOQLQueryCache.resetStatistics();
        
        // First call - cache miss
        Long start4 = System.currentTimeMillis();
        List<Account> cached1 = (List<Account>)SOQLQueryCache.query(query);
        Long time4 = System.currentTimeMillis() - start4;
        System.debug('First call:  ' + time4 + 'ms [CACHE MISS]');
        
        // Second call - cache hit!
        Long start5 = System.currentTimeMillis();
        List<Account> cached2 = (List<Account>)SOQLQueryCache.query(query);
        Long time5 = System.currentTimeMillis() - start5;
        System.debug('Second call: ' + time5 + 'ms [CACHE HIT ‚úÖ]');
        
        // Third call - cache hit!
        Long start6 = System.currentTimeMillis();
        List<Account> cached3 = (List<Account>)SOQLQueryCache.query(query);
        Long time6 = System.currentTimeMillis() - start6;
        System.debug('Third call:  ' + time6 + 'ms [CACHE HIT ‚úÖ]');
        System.debug('Average:     ' + ((time5 + time6) / 2) + 'ms (cache hits only)');
        System.debug('Status:      ‚úÖ Cached queries return instantly!');
        
        Long avgStandard = (time1 + time2 + time3) / 3;
        Long avgCached = (time5 + time6) / 2;
        
        if (avgCached > 0) {
            System.debug('\n>>> IMPROVEMENT: ' + (avgStandard / avgCached) + 'x faster with cache!');
        }
    }
    
    /**
     * Demo 2: Repeated queries in a loop - Real-world scenario
     */
    private static void demo2_RepeatedQueries() {
        System.debug('\n--- DEMO 2: Repeated Queries in Loop ---');
        System.debug('Simulating a component that queries data multiple times\n');

        String query = 'SELECT Id, Name FROM Account WHERE Industry = \'Technology\' LIMIT 20';
        Integer iterations = 10; // Increased to show cumulative benefit

        System.debug('Executing same query ' + iterations + ' times...\n');

        // Without cache
        System.debug('** Database.query() (no cache) **');
        Long standardStart = System.currentTimeMillis();
        for (Integer i = 0; i < iterations; i++) {
            List<Account> results = Database.query(query);
        }
        Long standardTotal = System.currentTimeMillis() - standardStart;
        System.debug('Total time: ' + standardTotal + 'ms');
        System.debug('Per query:  ' + (standardTotal / iterations) + 'ms average\n');

        // With cache
        System.debug('** SOQLQueryCache.query() **');
        SOQLQueryCache.resetStatistics();
        Long cachedStart = System.currentTimeMillis();
        List<Long> individualTimes = new List<Long>();
        for (Integer i = 0; i < iterations; i++) {
            Long iterStart = System.currentTimeMillis();
            List<Account> results = (List<Account>)SOQLQueryCache.query(query);
            Long iterTime = System.currentTimeMillis() - iterStart;
            individualTimes.add(iterTime);
        }
        Long cachedTotal = System.currentTimeMillis() - cachedStart;
        System.debug('Total time: ' + cachedTotal + 'ms');
        System.debug('Individual times: ' + individualTimes);
        System.debug('Per query:  ' + (cachedTotal / iterations) + 'ms average');
        System.debug('Cache stats: ' + SOQLQueryCache.getStatistics().getSummary());

        Long timeDiff = standardTotal - cachedTotal;
        if (cachedTotal < standardTotal) {
            System.debug('\n>>> Time saved: ' + timeDiff + 'ms (' +
                ((Decimal)timeDiff / standardTotal * 100).setScale(1) + '% faster)');
            System.debug('    First call: ' + individualTimes[0] + 'ms (miss), Subsequent: ' +
                ((cachedTotal - individualTimes[0]) / (iterations - 1)) + 'ms avg (hits)');
        } else {
            System.debug('\n>>> Cache overhead: ' + (-timeDiff) + 'ms slower for ' + iterations + ' calls');
            System.debug('    NOTE: For very fast queries (<10ms each), cache benefits appear with MORE iterations');
            System.debug('    First call: ' + individualTimes[0] + 'ms (miss + normalization)');
            System.debug('    Subsequent: ' + ((cachedTotal - individualTimes[0]) / (iterations - 1)) + 'ms avg (hits only)');
            System.debug('    Cache saves ~' + ((standardTotal/iterations) - ((cachedTotal - individualTimes[0]) / (iterations - 1))) + 'ms per cached call');
        }
    }
    
    /**
     * Demo 3: Multiple queries - Lightning Component scenario
     */
    private static void demo3_MultiQueryScenario() {
        System.debug('\n--- DEMO 3: Multi-Query Scenario ---');
        System.debug('Simulating Lightning component with 5 different queries\n');
        
        List<String> queries = new List<String>{
            'SELECT Id, Name FROM Account WHERE Industry = \'Technology\' LIMIT 10',
            'SELECT Id, Name FROM Account WHERE Industry = \'Healthcare\' LIMIT 10',
            'SELECT Id, Subject FROM Case WHERE Status = \'New\' LIMIT 10',
            'SELECT Id, Name FROM Contact LIMIT 10',
            'SELECT Id, Name FROM Lead WHERE Status = \'Open\' LIMIT 10'
        };
        
        System.debug('** STANDARD APEX - Component Load #1 **');
        Long standardStart1 = System.currentTimeMillis();
        for (String q : queries) {
            List<SObject> results = Database.query(q);
        }
        Long standardTime1 = System.currentTimeMillis() - standardStart1;
        System.debug('Time: ' + standardTime1 + 'ms\n');
        
        System.debug('** STANDARD APEX - Component Load #2 **');
        Long standardStart2 = System.currentTimeMillis();
        for (String q : queries) {
            List<SObject> results = Database.query(q);
        }
        Long standardTime2 = System.currentTimeMillis() - standardStart2;
        System.debug('Time: ' + standardTime2 + 'ms');
        System.debug('Status: ‚ùå No caching - same time each load\n');
        
        System.debug('** WITH CACHE - Component Load #1 **');
        SOQLQueryCache.resetStatistics();
        Long cachedStart1 = System.currentTimeMillis();
        for (String q : queries) {
            List<SObject> results = SOQLQueryCache.query(q);
        }
        Long cachedTime1 = System.currentTimeMillis() - cachedStart1;
        System.debug('Time: ' + cachedTime1 + 'ms (all cache misses)\n');
        
        System.debug('** WITH CACHE - Component Load #2 **');
        Long cachedStart2 = System.currentTimeMillis();
        for (String q : queries) {
            List<SObject> results = SOQLQueryCache.query(q);
        }
        Long cachedTime2 = System.currentTimeMillis() - cachedStart2;
        System.debug('Time: ' + cachedTime2 + 'ms (all cache hits!)');
        System.debug('Status: ‚úÖ Cached - dramatically faster on reload!');
        
        if (cachedTime2 > 0) {
            System.debug('\n>>> Component reload is ' + (standardTime2 / cachedTime2) + 'x faster with cache!');
        }
    }
    
    /**
     * Demo 4: Query normalization - Different formats, same cache
     */
    private static void demo4_QueryNormalization() {
        System.debug('\n--- DEMO 4: Query Normalization ---');
        System.debug('Testing queries with different formatting\n');
        
        String query1 = 'SELECT Id, Name FROM Account WHERE Industry = \'Technology\'';
        String query2 = 'SELECT Name, Id FROM Account WHERE Industry = \'Technology\''; // Different field order
        
        SOQLQueryCache.resetStatistics();
        
        System.debug('Query 1: ' + query1);
        Long start1 = System.currentTimeMillis();
        List<Account> result1 = (List<Account>)SOQLQueryCache.query(query1);
        Long time1 = System.currentTimeMillis() - start1;
        System.debug('Time: ' + time1 + 'ms [CACHE MISS]\n');
        
        System.debug('Query 2: ' + query2);
        Long start2 = System.currentTimeMillis();
        List<Account> result2 = (List<Account>)SOQLQueryCache.query(query2);
        Long time2 = System.currentTimeMillis() - start2;
        System.debug('Time: ' + time2 + 'ms [CACHE HIT ‚úÖ]');
        
        System.debug('\n>>> Query normalization allows cache hits even with different field order!');
        System.debug('>>> Hit rate: ' + SOQLQueryCache.getStatistics().getHitRate().setScale(1) + '%');
    }
    
    /**
     * Demo 5: Different cache storage strategies
     */
    private static void demo5_CacheStrategies() {
        System.debug('\n--- DEMO 5: Cache Storage Strategies ---\n');
        
        String query = 'SELECT Id, Name FROM Account LIMIT 25';
        
        // Transaction cache (default)
        System.debug('** TRANSACTION CACHE (default) **');
        SOQLQueryCache.CacheOptions transOpts = new SOQLQueryCache.CacheOptions()
            .setStorage(SOQLQueryCache.CacheStorage.TRANSACTION_ONLY);
        
        Long start1 = System.currentTimeMillis();
        List<Account> r1 = (List<Account>)SOQLQueryCache.query(query, transOpts);
        Long time1 = System.currentTimeMillis() - start1;
        
        Long start2 = System.currentTimeMillis();
        List<Account> r2 = (List<Account>)SOQLQueryCache.query(query, transOpts);
        Long time2 = System.currentTimeMillis() - start2;
        
        System.debug('First call:  ' + time1 + 'ms');
        System.debug('Second call: ' + time2 + 'ms (from transaction cache)');
        System.debug('Note: Cache cleared at end of transaction\n');
        
        // Platform cache
        System.debug('** PLATFORM CACHE (persistent) **');
        String query2 = 'SELECT Id, Name FROM Account WHERE AnnualRevenue > 1000000 LIMIT 25';
        SOQLQueryCache.CacheOptions platOpts = new SOQLQueryCache.CacheOptions()
            .setStorage(SOQLQueryCache.CacheStorage.PLATFORM_CACHE)
            .setTTL(300);
        
        Long start3 = System.currentTimeMillis();
        List<Account> r3 = (List<Account>)SOQLQueryCache.query(query2, platOpts);
        Long time3 = System.currentTimeMillis() - start3;
        
        Long start4 = System.currentTimeMillis();
        List<Account> r4 = (List<Account>)SOQLQueryCache.query(query2, platOpts);
        Long time4 = System.currentTimeMillis() - start4;
        
        System.debug('First call:  ' + time3 + 'ms');
        System.debug('Second call: ' + time4 + 'ms (from platform cache)');
        System.debug('Note: Cache persists across transactions for 5 minutes');
    }
    
    /**
     * Demo 6: Cache statistics and monitoring
     */
    private static void demo6_Statistics() {
        System.debug('\n--- DEMO 6: Cache Statistics ---\n');
        
        SOQLQueryCache.resetStatistics();
        
        // Execute various queries
        String[] queries = new String[]{
            'SELECT Id FROM Account LIMIT 5',
            'SELECT Id FROM Account LIMIT 5',  // Duplicate
            'SELECT Id FROM Contact LIMIT 5',
            'SELECT Id FROM Account LIMIT 5',  // Duplicate
            'SELECT Id FROM Opportunity LIMIT 5',
            'SELECT Id FROM Contact LIMIT 5',  // Duplicate
            'SELECT Id FROM Lead LIMIT 5'
        };
        
        System.debug('Executing 7 queries (4 unique, 3 duplicates)...\n');
        
        for (String q : queries) {
            SOQLQueryCache.query(q);
        }
        
        SOQLCacheStatistics stats = SOQLQueryCache.getStatistics();
        
        System.debug('üìä CACHE STATISTICS:');
        System.debug('  Total queries:    ' + stats.getTotalQueries());
        System.debug('  Cache hits:       ' + stats.getCacheHits());
        System.debug('  Cache misses:     ' + stats.getCacheMisses());
        System.debug('  Hit rate:         ' + stats.getHitRate().setScale(1) + '%');
        System.debug('  Transaction hits: ' + stats.getTransactionHits());
        System.debug('  Platform hits:    ' + stats.getPlatformHits());
        
        System.debug('\n>>> Summary: ' + stats.getSummary());
    }
    
    /**
     * Setup test data if needed
     */
    private static void setupTestData() {
        Integer accountCount = [SELECT COUNT() FROM Account LIMIT 1];
        
        if (accountCount < 10) {
            System.debug('Setting up test data...\n');
            
            List<Account> testAccounts = new List<Account>();
            for (Integer i = 0; i < 50; i++) {
                testAccounts.add(new Account(
                    Name = 'Test Account ' + i,
                    Industry = (Math.mod(i, 3) == 0) ? 'Technology' : 'Healthcare',
                    AnnualRevenue = 500000 + (i * 100000)
                ));
            }
            
            insert testAccounts;
            System.debug('Created ' + testAccounts.size() + ' test accounts\n');
        }
    }
}